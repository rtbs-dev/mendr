---
title: Component and Component+residual Plots
jupyter:
  jupytext:
    formats: ipynb,qmd
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.7
  kernelspec:
    display_name: mendr
    language: python
    name: mendr
---

```{python}
import pandas as pd
import awkward as ak
import akimbo.pandas
import seaborn as sns
# from great_tables import GT
import json
from pathlib import Path
import numpy as np
import matplotlib.pyplot as plt
from mendr.experiments import (
    load_graph, _datasets#,_estimators, _metrics,_sq, _dataset_paths
)# pd.DataFrame.to_dict(
```

```{python}
sns.set_theme(font='serif',palette='Set2', context='paper', style='ticks')
list(Path('../results').glob('*.jsonl'))
```

```{python}
# a = ak.concatenate([ak.from_json(p, line_delimited=True) for p in Path('../results').glob('*.jsonl')])
# a
# ak.to_dataframe(a)
df = pd.concat([pd.read_json(p, lines=True) for p in Path('../results').glob('*.jsonl')])
df.head()
```

```{python}
# sns.regplot(delta, x='diff', y='label', logistic=True)
# delta
df.set_index(['ID','name']).sort_index()
```

```{python}
# df = (
#     # akpd.from_awkward(
#     ak.to_dataframe(
#         ak.from_json(Path('res.json'))
#     )
#     .rename(dict(zip(
#         ['fowlkes_mallows','matthews_corrcoef','F1'],
#         ['F-M','MCC','F1']
#     )), axis=1)
#     # .ak.to_columns(extract_all=True)
# )
# df = pd.read_csv('res.csv', index_col=0)
# df = pd.read_csv('res2-short.csv', index_col=0)

# df.head()
```

```{python}
# GT(df.head(10)).fmt_nanoplot(columns='matthews_corrcoef')
```

```{python}
tidy = (
    df
    # .drop(['thres-vals', 'F1','matthews_corrcoef', 'fowlkes_mallows'], axis=1)
    .melt(
        id_vars=['ID', 'kind','name','n-nodes','n-edges','n-walks','n-jumps',
                 'med-node-ct','iqr-node-ct','med-actv-ct','iqr-actv-ct',
                 'seconds'], 
        value_vars=['F-M','MCC','F1', 'APS'],
        value_name='score', var_name='metric'
    )
    .astype({
        'kind':'category', 
        'name':'category', 
        'metric': 'category',
        'ID':str,
    })
    .assign(**{
        'kind': lambda df: df['kind'].cat.rename_categories({'TR':'Tree','BL':'Block', 'SC':'ScaleFree'}),
        'seconds-log': lambda df: np.log10(df['seconds']),
        # 'jump-density':lambda df: df['n-jumps']/df['n-nodes'],
        'edge-density': lambda df: df['n-edges']/(df['n-nodes']*(df['n-nodes']-1)/2.),
        'edge-sparsity': lambda df: 1-df['edge-density'],

        'actv-fraction': lambda df: df['med-actv-ct']/df['n-nodes'],
        'node-baseprob': lambda df: df['med-node-ct']/df['n-walks'],
        # 'walk-density': lambda df: df['n-walks']/df['n-nodes'],
        # 'nodes-norm': lambda df: 1/df['walk-density'],
        # https://www.researchgate.net/publication/271685622_User%27s_Guide_to_Ratio_Variables
        'sec-per-walk': lambda df: df['seconds']/df['n-walks'],
        'logsec-per-walk': lambda df: np.log(df['sec-per-walk']),
        'node-exposure': lambda df: df['n-nodes']/df['n-walks'],
        'inv-walks': lambda df: 1/df['n-walks'],
        # 'jump-sparsity'
        'tot-jumps': lambda df: df['n-jumps']*df['n-walks'],
        'MIR': lambda df: 1/df.groupby(['ID','metric'], observed=True)['score'].rank(ascending=False),
        'failed': lambda df: df['score'].isna()
    })
    
)
tidy.dtypes#.kind
```

```{python}
# 1/tidy.groupby(['ID','metric'])['score'].rank(ascending=False)

# tidy[tidy.failed & (tidy.metric=='seconds')]
# tidy[tidy.metric=='seconds']
tidy#[tidy.failed]
```

```{python}
tidy.query('metric=="APS"').groupby('name', observed=True)['score'].mean().sort_values(ascending=False)
```

```{python}
avg_scores= tidy.query('metric=="MCC"').groupby('name', observed=True)['score'].mean().sort_values(ascending=False)
avg_scores

# pd.DataFrame.groupby()
```

```{python}
# ak.to_arrow(a).to_pandas()
# df.groupby(.pipe(lambda df: df.set_index('name').)
from sklearn.linear_model import LogisticRegression
from affinis.utils import _sq
from tqdm import tqdm
betas = []
diffs = []

dats = []
# df.query('name=="EFM"').estimate.ak.array- df.query('name=="FP"').estimate.ak.array
for dat in tqdm(_datasets): 
    df_sub = df.query(f'ID=="{dat}"').set_index('name')
    gT = _sq(load_graph(dat).graph.to_array().todense()).astype(bool)
    dats.append(gT)
    diff = np.array(df_sub.loc['EFM'].estimate)-np.array(df_sub.loc['FP'].estimate)
    diffs.append(diff)
    jitter_t = 0.2*np.random.rand(gT.sum())
    jitter_f = 0.2*np.random.rand((~gT).sum())
    # plt.scatter(diff[gT], np.ones_like(jitter_t)+jitter_t, color='k', alpha=0.1, marker='.')
    # plt.scatter(diff[~gT],np.zeros_like(jitter_f)+jitter_f, color='r', alpha=0.1, marker='.')

    betas+=[LogisticRegression(fit_intercept=False).fit(diff.reshape(-1,1), gT).coef_[0][0]]

delta = pd.DataFrame({'label':np.hstack(dats), 'diff':np.hstack(diffs)})
    # .estimate.ak.array- df.query('name=="FP"').estimate.ak.array
# df.query('name=="EFM"').estimate.ak.array- df.query('name=="FP"').estimate.ak.array
```

```{python}
sns.displot(np.array(betas))
```

```{python}
# alg_order=['TS','TSi','GL','HSS','RP','CS','eOT',]
graph_order=['ScaleFree', 'Tree', 'Block']
alg_order = avg_scores.index.tolist()
metric_order=['MCC','F-M','APS']
# metric_order=['MCC', ']
g = sns.FacetGrid(
    tidy, 
    col="metric", row="kind",
    margin_titles=True, aspect=1, height=2,
    col_order=metric_order,
    row_order=graph_order,
    # hue='name',
    # hue_order=alg_order,
    # hue = 'kind',
    # hue_kws={
    #     'marker':['1','2'], 
    # }
)

g.set(
    ylim=(-0.1,1.1), 
    # xlim=(0.09,11), 
    # xscale="log", 
    clip_on=False,

)

g.map(
    sns.pointplot, "score", "name", 
    order=alg_order,
    estimator='median', 
    # errorbar='pi',
    errorbar=None,
    linestyle='',
    color='k',
    marker='|',
    markersize=15,
)

g.map(
    sns.stripplot, "score","name",
    order=alg_order,
    dodge=True, alpha=.2, marker='.',
    color='grey',

)
# sns.catplot(
#     tidy, 
#     # x='name', y='score',
#     x='name',y='score',
#     kind='point', 
#     hue='metric',
#     col='kind', 
#     row='metric',
#     # orient='h',
#     # row='n-nodes',
#     # row_order=['TR','BL'],
#     estimator='median',
#     errorbar='pi',
#     order=alg_order,
#     hue_order=metric_order,
#     row_order=metric_order,
#     aspect=1.5, height=2,
#     # margin_titles=True,

# )
```

```{python}
# pd.concat([
# pd.concat([tidy.groupby(['metric','name'], observed=True)['score'].mean().unstack()[alg_order]], keys=['Totals']),
# tidy.groupby(['kind','metric','name'], observed=True)['score'].mean().unstack()[alg_order]
# ]).round(2).T[['Totals']+graph_order]
pd.concat([
    tidy.groupby(['metric','name'], observed=True)['score'].mean().unstack()[alg_order],#.round(2)
    tidy.groupby('name', observed=True)['MIR'].mean().to_frame().T
]).T.round(2)
```

```{python}
sns.catplot(
    tidy.query('metric=="MCC"'), 
    y='name', 
    # x='MIR',
    x='score',
    orient='h',
    kind='bar', 
    # hue='metric',
    estimator='mean',
    errorbar=('pi',50),
    # col='kind', 
    # row='n-nodes',
    # col_order=['TR','BL'],
    order=alg_order,
    # hue_order=metric_order,
    aspect=1.618, height=2,
    
    # margin_titles=True,
)
plt.xlabel('avg. E[MCC]')
# plt.savefig('MCC.svg')
```

```{python}
sns.catplot(
    tidy,#.query('metric=="MCC"'), 
    y='name', 
    x='MIR',
    orient='h',
    kind='bar', 
    # hue='metric',
    estimator='median',
    errorbar=('pi',50),
    # col='kind', 
    # row='n-nodes',
    # col_order=['TR','BL'],
    order=alg_order,
    # hue_order=metric_order,
    aspect=1.618, height=2,
    
    # margin_titles=True,
)
plt.xlabel('median MIR')
# plt.savefig('MIR.svg')
```

```{python}
# import seaborn.objects as so
def plot_median(data, *args, **kwargs):
    # my = data[kwargs.get(y,data.columns[1])].median()
    # mx = data[kwargs.get(x,data.columns[1])].median()
    plt.axhline(data.median(), **kwargs)
    # plt.axvline(mx**kwargs)

def compare_scores_vs(xvar, alg_order=alg_order, metric='MCC'):
    g = sns.FacetGrid(
        tidy.query(f'metric=="{metric}"'), 
        col="name",
        col_wrap=4,
        # margin_titles=True, 
        aspect=1, height=2,
        col_order=alg_order,
    
    )
    g.set(
        ylim=(-0.1,1.1), 
        # xlim=(0.09,11), 
        xscale="log", 
        clip_on=False
    )
    
    g.map(plot_median,'score', color='r', alpha=0.5, clip_on=False, label='median score')
    g.map(
        sns.regplot, xvar, "score", 
        color=".3", 
        logx=True, 
        scatter_kws={'alpha':0.2},
        line_kws={'ls':'--','color':'k','label':'OLS trend line'},
        marker='.', label='experiment',
    
    )
    g.add_legend(loc=(0.35,0.), ncols=3)
    return g
compare_scores_vs('n-walks')

# plt.legend()
```

```{python}
# compare_scores_vs('n-nodes')
compare_scores_vs('n-jumps')
# compare_scores_vs('tot-jumps')
```

```{python}
compare_scores_vs('edge-density', metric='MCC')
```

```{python}
import matplotlib.pyplot as plt


g = sns.FacetGrid(
    tidy, row="metric", col="name",
    margin_titles=True, aspect=1, height=2,
    row_order=metric_order,
    col_order=alg_order,
    hue='metric',
    hue_order=metric_order,
    # hue = 'kind', 
    # hue_kws={
    #     'marker':['1','2'], 
    #     # 'line_kws':[{'color':sns.color_palette('dark')[0],'ls':':'},{'color':'sienna','ls':':'}]},
    # }
)
g.set(
    ylim=(-0.1,1.1),
    # xlim=(0.09,11), 
    xscale="log", 
    clip_on=False
)
g.map(plot_median, 'score', color='r', alpha=0.2)

g.map(
    sns.regplot, "med-node-ct", "score", 
    # color=".3", 
    logx=True, 
    scatter_kws={'alpha':0.5},
    # line_kws={'alpha':1.}
    line_kws={'ls':'--','color':'k'},
    marker='1',
    # marker='.'#,scatter_kws={'fillstyle':'none'}

)
g.add_legend()
```

```{python}
sns.boxplot(
    data=(tidy
     .pivot(index=['ID','metric'], columns='name', values='score')
     .pipe(lambda df: df[['FP', 'FPi']].max(axis=1) - df['GL'])
     .rename('score')
     .reset_index()
    ),
    x='score',
    y='metric'
)

# df
```

```{python}
df_improv = pd.DataFrame([
    tidy.pivot(index=['ID','metric'], columns='name', values='score').pipe(lambda df: df['EFM']>df['FP']).rename('score-better'),
    tidy.pivot(index=['ID','metric'], columns='name', values='seconds').pipe(lambda df: df['FP']<df['EFM']).rename('time-better')
]).T.reset_index().query("metric=='MCC'")
df_improv
pd.crosstab(df_improv['ID'], [df_improv['score-better'], df_improv['time-better']]).sum(axis=0).unstack()
```

```{python}
sns.histplot(
    data=(tidy
     .pivot(index=['ID','metric'], columns='name', values='score')
     .pipe(lambda df: df['EFM']/df['FP'] )
     .rename('score')
     .reset_index()
     .assign(improved=lambda df: df['score']>=1)
    ),
    x='score',
    hue='improved',
    log_scale=True,
    # y='metric'
)
# plt.xscale('symlog')
# plt.yscale('log')
```

```{python}
# sns.pairplot(
df.set_index([
    'name','kind','ID', 
    'n-edges','n-nodes','n-walks','n-jumps',
    'med-node-ct','iqr-node-ct','med-actv-ct','iqr-actv-ct',
]).unstack(level='name').reset_index()['MCC'][alg_order[:4]], 
             # kind='hist', corner=True)
# df.unstack(
```

```{python}
import matplotlib as mpl
import seaborn.objects as so
f = mpl.figure.Figure(figsize=(8, 6))
sf1, sf2 = f.subfigures(2, 1, height_ratios=(2,3))

theme_config = {**sns.axes_style('ticks')}|{"axes.spines.top": False, "axes.spines.right": False}

# med-node-ct','iqr-node-ct','med-actv-ct','iqr-actv-ct'

(so.Plot(tidy, x='n-nodes',y='seconds',color='name')
 # .add(so.Dots(marker='.'), so.Dodge(), so.Jitter(.3))
 .add(so.Range(),so.Est(errorbar=("pi",50)), so.Dodge())
 .add(so.Dot(marker='o', pointsize=10), so.Agg('median'), so.Dodge())
 .add(so.Dots(alpha=0.1, pointsize=2), so.Dodge(gap=-1.5), so.Jitter(0.3) )
 .scale(
     x=(so.Nominal()
        # .tick(at=[10,30,100,300])
        # .label(like="{x:.0f}")
       ), 
     y='log',
     # marker=so.Nominal(["_", "."]),
     color=so.Nominal('Set2',order=['FP', 'EFM', 'GL'])
 )
 .theme(theme_config)
 .on(sf1)
 .plot()
 # .add(so.Range(
)


p = (so.Plot(tidy, y='seconds',color='name',marker='failed', pointsize='failed')
 .pair(x=['edge-density','n-jumps'])
 # .facet(row='name', order=['TS', 'GL','HSS'])
 .add(so.Dots(), so.Jitter(0.3))
 .scale(
     x='log', y='log',
     marker=so.Nominal([".", "x"]),
     color=so.Nominal('Set2',order=['FP', 'EFM','GL']),
     pointsize=so.Nominal([2.,5.],order=[False,True]),
 )
 .theme(theme_config)
 .on(sf2)
 .layout(engine='constrained',extent=(0, 0, 0.95, 1))
 .plot()
 # .add(so.Line(color=".2"), so.PolyFit())
)
f.legends.pop(0)
# f.legends[0].get_bbox_to_anchor()#set_bbox_to_anchor((0.9,0.5)).
p
# so.Plot.layout(extend=
```

```{python}
# sns.relplot(
g = sns.PairGrid(
    tidy[tidy['name'].isin(['FP'])], #row="metric", col="name",
    x_vars=['med-actv-ct', 'edge-density'],
    y_vars=['sec-per-walk'],
    hue = 'n-nodes', 
    palette='Set2',

)
g.set(
    # ylim=(-0.1,1.1), 
    # xlim=(0.09,11), 
    xscale="log", 
    yscale='log',
    clip_on=False,
)

g.map(
    sns.scatterplot, marker='.'#, logx=True, truncate=True,
)
g.add_legend()
```

```{python}
g = sns.relplot(
    tidy,
    # tidy.query("name in ['GL','TS']"),
    x='med-actv-ct',
    # x='med-node-ct',
    

    # x='jump-density',
    # y='seconds-log',
    # y='sec-per-walk',
    y = 'seconds',
    col='name',
    col_order=['FP','GL'], 
    hue='n-nodes', style='n-nodes',
    # markers=['+','.','x','s'],
    palette='Set2',
    # x_partial='n-nodes',
    # logx=True,
    # robust=True,
)

# ticks = 
# ax.get_yaxis().set_major_formatter(formatter)
# ax.get_yaxis().set_major_formatter(formatter)
g.set(
    xscale='log',
    # yticks=ticks,
    # xlabel='Activation Fraction',
    # ylabel='seconds',
    yscale='log',
    clip_on=False,
)
```

```{python}
g = sns.lmplot(
    tidy,
    # tidy.query("name in ['GL','TS']"),
    # x='n-jumps',
    x='med-actv-ct',
    y='seconds-log',
    # y='seconds',
    # col='name',
    hue='name',
    hue_order=['FP','GL'], 
    # style='n-nodes',
    # hue='n-nodes', style='n-nodes',
    markers=['+','.'],
    palette='Set2',
    # x_partial='jump-sparsity',
    logx=True,
    # robust=True,
)


# ticks = 
# ax.get_yaxis().set_major_formatter(formatter)
# ax.get_yaxis().set_major_formatter(formatter)
g.set(
    xscale='log',
    # yticks=ticks,
    # xlabel='Activation Fraction',
    ylabel='time (s)',
    # yscale='log'
)
from matplotlib.ticker import LogFormatterExponent, FuncFormatter
formatter = lambda x, pos: '$10^{'+f'{x:g}'+'}$' if (x//1==x) else ''
for ax in g.axes.flat:
    ax.yaxis.set_major_formatter(FuncFormatter(formatter))
```

```{python}
g = sns.lmplot(
    tidy,
    # tidy.query("name in ['GL','TS']"),
    # x='n-jumps',
    x='edge-density',
    # x='med-node-ct',
    y='seconds-log',
    # y='seconds',
    # col='name',
    hue='name',
    hue_order=['FP','GL'], 
    # style='n-nodes',
    # hue='n-nodes', style='n-nodes',
    markers=['+','.'],
    palette='Set2',
    # x_partial='n-nodes',
    logx=True,
    # robust=True,
)

# ticks = 
# ax.get_yaxis().set_major_formatter(formatter)
# ax.get_yaxis().set_major_formatter(formatter)
g.set(
    xscale='log',
    # yticks=ticks,
    # xlabel='Activation Fraction',
    ylabel='time (s)',
    # yscale='log'
)
from matplotlib.ticker import LogFormatterExponent, FuncFormatter
formatter = lambda x, pos: '$10^{'+f'{x:g}'+'}$' if (x//1==x) else ''
for ax in g.axes.flat:
    ax.yaxis.set_major_formatter(FuncFormatter(formatter))
```

```{python}
import statsmodels.api as sm
from statsmodels.formula.api import ols, rlm
```

```{python}
fp_feats = ['score','n-walks','n-nodes','med-actv-ct']

fp_model = ols(
    'score ~ np.log(Q("n-walks")) + np.log(Q("n-nodes")) + np.log(Q("med-actv-ct"))', 
    data=tidy.query("name=='FP'")[fp_feats]
).fit()
fig = sm.graphics.plot_ccpr_grid(fp_model)
fig.tight_layout(pad=1.0)
fp_model.summary()
```

```{python}
fp_feats = ['seconds','n-walks','n-nodes','med-actv-ct']

fp_model = ols(
    'seconds ~ Q("n-walks") + Q("n-nodes") + Q("med-actv-ct")', 
    data=np.log(tidy.query("name=='FP'")[fp_feats])
).fit()
fp_model.summary()
```

```{python}
fig = sm.graphics.plot_partregress_grid(fp_model)
fig.tight_layout(pad=1.0)
```

```{python}
fig = sm.graphics.plot_ccpr_grid(fp_model)
fig.tight_layout(pad=1.0)
```

```{python}
gl_feats = ['score','n-nodes','edge-density', 'n-walks', 'actv-fraction']
# gl_feats = ['seconds','n-nodes', 'n-walks', 'med-actv-ct','med-node-ct']


gl_model = ols(
    'score ~ np.log(Q("n-walks")) + np.log(Q("edge-density")) + np.log(Q("n-nodes"))', 
    # 'seconds ~ Q("n-walks") + Q("med-node-ct")/Q("med-actv-ct") + Q("n-nodes")', 

    data=tidy.query("name=='GL' & metric=='MCC'")[gl_feats].dropna()
).fit()
fig = sm.graphics.plot_ccpr_grid(gl_model)
fig.tight_layout(pad=1.0)
gl_model.summary()
# np.log(tidy.query("name=='GL' & metric=='MCC'")[gl_feats].dropna())
```

```{python}
gl_feats = ['seconds','n-nodes','edge-density', 'n-walks', 'actv-fraction']
# gl_feats = ['seconds','n-nodes', 'n-walks', 'med-actv-ct','med-node-ct']


gl_model = ols(
    'seconds ~ Q("n-walks") + Q("edge-density") + Q("n-nodes")', 
    # 'seconds ~ Q("n-walks") + Q("med-node-ct")/Q("med-actv-ct") + Q("n-nodes")', 

    data=np.log(tidy.query("name=='GL'")[gl_feats])
).fit()
gl_model.summary()
```

```{python}
fig = sm.graphics.plot_partregress_grid(gl_model)
fig.tight_layout(pad=1.0)
```

```{python}
fig = sm.graphics.plot_ccpr_grid(gl_model)
fig.tight_layout(pad=1.0)
```

```{python}
from scipy.linalg import lstsq

f = mpl.figure.Figure(figsize=(8, 3))
# feats = ['n-walks','med-actv-ct', 'med-node-ct', 'n-nodes']
feats = ['n-walks','n-jumps', 'n-nodes']
# feats = ['n-walks', 'n-nodes']

sbplts = f.subplots(1, len(feats), sharey=True)
    # x=,

x= tidy.query("name=='FP'")[feats].values 
M = np.c_[np.ones(x.shape[0]),np.log10(x)]
# M = np.c_[np.ones(x.shape[0]),x]
y = tidy.query("name=='FP'")['seconds'].values
p,res,rnk,s = lstsq(M,np.log10(y))
# p,res,rnk,s = lstsq(M,y)
print(p)
# plt.scatter( tidy.query("name=='TS'")['med-actv-ct'],y-M@p, color='dodgerblue', marker='.')
resid = np.log10(y) - M@p
for i,feat in enumerate(feats):
    x = M[:,i+1]
    pred = x*p[i+1]
    sbplts[i].scatter( np.power(10,x),np.power(10,resid+pred), color='dodgerblue',marker='.', alpha=0.1)
    # sns.regplot(x=np.power(10,x), y=np.power(10,resid+pred), ax=sbplts[i], robust=True)
    x = np.linspace(x.min(), x.max())
    sbplts[i].plot( np.power(10,x),np.power(10,x*p[i+1]), color='dodgerblue')
    # sbplts[i].plot( np.power(10,x),np.power(10,x*p[i+1]*np.log(x*p[i+1])), color='0.8')

    sbplts[i].set_xscale('log')
    sbplts[i].set_yscale('log')
    sbplts[i].set_title(feat)
    # sbplts[i].scatter( tidy.query("name=='FP'")['med-actv-ct'],y-M@p+M[d:,2]*p[2], color='dodgerblue',marker='+')
x = np.linspace(M[:,2].min(), M[:,2].max())

# sbplts[1].plot(np.power(10,x),np.power(10,linearithmic([0.8,0.65,0.5], x, np.zeros_like(x))))
# plt.scatter( tidy.query("name=='TS'")['med-node-ct'],np.power(10,y-M@p), marker='.')
f
```

```{python}
# plt.plot(x:=np.logspace(1,15), x*np.log10(x/10)/10, color='r')
# plt.plot(x, x, color='k')
# # plt.plot(x, x**1.11)
# # plt.plot(x, np.log10(x))
# plt.yscale('log')
# plt.xscale('log')
# plt.gca().set_aspect('equal')
from scipy.optimize import least_squares
res_robust = least_squares(
    linearithmic:=lambda p,x,y: p[0]+p[1]*x*(np.log(x*p[2]))-y, 
    np.array([1,1,1]), 
    bounds=(0.1,1.9),
    loss='arctan', 
    # f_scale=0.1, 
    args=(M[:,2],np.log10(M[:,2]+resid))
)
res_robust
```

```{python}
plt.scatter( 
    np.power(10,M[:,2]),
    np.power(10,resid+M[:,2]*p[2]), 
    color='dodgerblue',marker='.', alpha=0.1
)
plt.gca().set(xscale='log',yscale='log')
x=np.linspace(M[:,2].min(),M[:,2].max())
# print(linearithmic(res_robust['x'], x, np.zeros_like(x)-0.2))
# plt.scatter(np.power(10,M[:,2]), np.power(10,linearithmic(res_robust['x'], M[:,2], np.zeros_like(M[:,2]))))
plt.plot(np.power(10,x), np.power(10,linearithmic(res_robust['x'], x, np.zeros_like(x))+0.2))
plt.plot(np.power(10,x), np.power(10,linearithmic([0.8,0.65,0.5], x, np.zeros_like(x))))
plt.plot(np.power(10,x), np.power(10,linearithmic([0.55,0.35,0.35], x, np.zeros_like(x))))


# linearithmic(res_robust['x'], x, np.zeros_like(x))
# print(np.power(10,M[:,2]))
```

```{python}
f = mpl.figure.Figure(figsize=(8, 3))
# feats = ['n-nodes','node-baseprob', 'n-walks']
feats = ['n-walks','n-jumps', 'n-nodes']

sbplts = f.subplots(1, len(feats), sharey=True)

x= tidy.query("name=='GL'")[feats].values 
M = np.c_[np.ones(x.shape[0]),np.log10(x)]
# M = np.c_[np.ones(x.shape[0]),x]
y = tidy.query("name=='GL'")['seconds'].values
p,res,rnk,s = lstsq(M,np.log10(y))
# p,res,rnk,s = lstsq(M,y)
print(p)
# plt.scatter( tidy.query("name=='GL'")['med-node-ct'],np.power(10,y-M@p), marker='+')
# plt.scatter( tidy.query("name=='GL'")['med-actv-ct'],y-M@p,color='xkcd:rust', marker='.')
for i,feat in enumerate(feats):
    x = M[:,i+1]
    pred = x*p[i+1]
    resid = np.log10(y) - M@p
    sbplts[i].scatter( np.power(10,x),np.power(10,resid+pred),color='xkcd:rust',marker='.', alpha=0.1)
    # print(M)
    x = np.linspace(x.min(), x.max())
    sbplts[i].plot( np.power(10,x),np.power(10,x*p[i+1]), color='xkcd:rust')
    
    sbplts[i].set_xscale('log')
    sbplts[i].set_yscale('log')
    sbplts[i].set_title(feat)

f
# plt.xscale('log')
# plt.yscale('log')
```

```{python}
# https://www.researchgate.net/publication/271685622_User%27s_Guide_to_Ratio_Variables

f = mpl.figure.Figure(figsize=(8, 3))
feats = ['med-actv-ct', 'med-node-ct', 'n-nodes','n-walks']
sbplts = f.subplots(1, len(feats))
    # x=,

x= tidy.query("name=='FP'")[feats].values 
M = np.divide(np.c_[np.ones(x.shape[0]),x].T,x[:,-1]).T
# M = np.c_[np.ones(x.shape[0]),x]
y = tidy.query("name=='FP'")['seconds'].values/x[:,-1]
p,res,rnk,s = lstsq(M,y)
# p,res,rnk,s = lstsq(M,y)
print(p)
# plt.scatter( tidy.query("name=='TS'")['med-actv-ct'],y-M@p, color='dodgerblue', marker='.')
for i,feat in enumerate(feats):
    x = M[:,i]
    pred = x*p[i]
    resid = y - M@p
    sbplts[i].scatter( x,resid+pred, color='dodgerblue',marker='+')
    x = np.linspace(x.min(), x.max())
    sbplts[i].plot(x,x*p[i], color='dodgerblue')

    # sbplts[i].scatter( tidy.query("name=='FP'")['med-actv-ct'],y-M@p+M[:,2]*p[2], color='dodgerblue',marker='+')

# plt.scatter( tidy.query("name=='TS'")['med-node-ct'],np.power(10,y-M@p), marker='.')


x= tidy.query("name=='GL'")[feats].values 
M = np.divide(np.c_[np.ones(x.shape[0]),x].T,x[:,-1]).T
# M = np.c_[np.ones(x.shape[0]),x]
y = tidy.query("name=='GL'")['seconds'].values/x[:,-1]
p,res,rnk,s = lstsq(M,y)
# p,res,rnk,s = lstsq(M,y)
print(p)
# plt.scatter( tidy.query("name=='GL'")['med-node-ct'],np.power(10,y-M@p), marker='+')
# plt.scatter( tidy.query("name=='GL'")['med-actv-ct'],y-M@p,color='xkcd:rust', marker='.')
for i,feat in enumerate(feats):
    x = M[:,i]
    pred = x*p[i]
    resid = y - M@p
    sbplts[i].scatter(x,resid+pred,color='xkcd:rust',marker='+')
    
    x = np.linspace(x.min(), x.max())    
    sbplts[i].plot(x,x*p[i], color='xkcd:rust')

print(res)
f
```

```{python}
# plt.scatter( x[:,1],np.power(10,y-M@p))
# plt.xscale('log')
sns.histplot(tidy.query('name=="TS"').pipe(lambda df: df['seconds']/df['n-walks']))
# plt.yscale('log')
```

```{python}
import statsmodels.api as sm

from patsy import dmatrices
```

```{python}
g = sns.PairGrid(
    tidy[tidy['name'].isin(['GL'])], #row="metric", col="name",
    x_vars=['n-nodes', 'jump-sparsity','walk-sparsity'],
    y_vars=['seconds'],
    hue = 'n-nodes', 
    palette='Set2',

)
g.set(
    # ylim=(-0.1,1.1), 
    # xlim=(0.09,11), 
    xscale="log", 
    yscale='log',
    clip_on=False,
)

g.map(
    sns.scatterplot, marker='.'#, logx=True, truncate=True,
)
g.add_legend()
```

```{python}
sns.histplot(tidy, x='',y='n-nodes', log_scale=True)
```
