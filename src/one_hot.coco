import numpy as np
# from scipy import sparse
import sparse
from jaxtyping import Int, jaxtyped
from beartype import beartype

type RW_Array = Int[np.ndarray, 'n_walks n_jumps']
type OneHot_SPArray = Int[sparse.COO, 'n_walks n_nodes']


@jaxtyped(typechecker=beartype)
def rw_jumps_to_coords(rw:RW_Array, num_nodes:int|None = None) -> OneHot_SPArray:

    num_walks = rw.shape[0]
    num_nodes ??= np.max(rw)+1  # need at least enough nodes for biggest node index

    # trick to one-hot encode occurrences from walks
    row_idx = np.repeat(
        np.arange(num_walks)[:,None],
        rw.shape[1],
        1
    ).flatten()

    col_idx = rw.flatten()

    idx = np.unique(np.array([row_idx,col_idx]), axis=1)  # no duplicates

    return sparse.COO(idx, data=1, shape=(num_walks, num_nodes))

    # assert G.mat.shape[0]>=col_idx.max(), f'{G.mat.shape} A is bad for col pointer {col_idx.max()}'
    # X = sparse.coo_matrix(
    #     (np.ones_like(idx[0]), (idx[0], idx[1])),
    #     shape=(rw.shape[0], n)
    # ).astype(bool)

