"""
Inspired by BinSparse specification
"""
from serde import serde, AdjacentTagging
from dataclasses import dataclass
import numpy as np
import numpy.typing as npt
import networkx as nx
import sparse
import csrgraph as cg
from beartype.door import is_bearable
from typing import Type
from jaxtyping import Shaped
from scipy.sparse import spmatrix, sparray, coo_matrix
# import

# @dataclass
# class BSFmt:
#     version:str = "0.1"

# @dataclass
# class SparseFMT:
#     shape: (int; int)

type SparseValues = Shaped[np.ndarray, "#nnz"]  # could be scalar

@serde
@dataclass
class COO:
    """
    Data model for COO sparse arrays.

    Args:
        indices_0: npt.NDArray[int]
        indices_1: npt.NDArray[int]
        values: int: only supports binary sparse for now
    """
    indices_0: npt.NDArray[int]
    indices_1: npt.NDArray[int]
    values: int #| np.number

@serde
@dataclass
class CSC:
    """
    Data model for CSC sparse arrays.

    Args:
        pointers_to_1: npt.NDArray[int]
        indices_1: npt.NDArray[int]
        values: int: only supports binary sparse for now
    """
    pointers_to_1: npt.NDArray[int]
    indices_1: npt.NDArray[int]
    values: int #| np.number


type SparseArrayType = (
    COO
    | CSC
)

@serde(tagging=AdjacentTagging("format", "data_types"))
@dataclass
class SerialSparse:
    """
    Sparse, serializable array, typed with shape information.

    Args:
        shape: tuple[int,int]
        array: COO|CSC
    """
    # version:str = "0.1"
    shape: tuple[int,int]
    array: SparseArrayType


    @classmethod
    def from_array[T](cls:Type[T], a)->T:
        """parse supported array type into an instance of this class
        """
        return ser_from_sparse(a)


    def to_array[T](self)->T:
        return ser_to_sparse(self.shape, self.array)


# @addpattern
match def ser_from_sparse(a `is_bearable` sparse.COO):
    """parse a supported array or graph into a serializeable representation"""
    idx = a.coords
    values = 1  # ignore a.data for the purposes of this work... for now
    # if np.all(np.isclose(a.data, a.data[0])):
    #     values = a.data[0]
    # else:
    #     values = a.data
    return SerialSparse(a.shape, COO(idx[0], idx[1], values))

addpattern def ser_from_sparse(s `is_bearable` spmatrix) = s |> ser_from_sparse .. sparse.COO.from_scipy_sparse
addpattern def ser_from_sparse(s `is_bearable` sparray) = s |> ser_from_sparse .. coo_matrix
addpattern def ser_from_sparse(g `is_bearable` nx.Graph) = g |> ser_from_sparse .. nx.to_scipy_sparse_array
addpattern def ser_from_sparse(g `is_bearable` cg.csrgraph) = ser_from_sparse(g.mat)


match def ser_to_sparse(shape, COO(row,col,vals)):
    """convert to a tensor/sparse-array representation"""
    coords = np.array([row,col])
    return sparse.COO(coords, data=vals, shape=shape)


@serde
@dataclass
class SerialRandWalks:
    """MENDR 'problem' container,

    Holds a sparse adjacency matrix (graph) and an array of random walks (node ID jumps)

    The "activations" sparse array is the representation to be used in MENDR challenges,
    with all ordering removed; visited nodes are instead marked with a "1".

    Args:
        graph: SerialSparse
        jumps: npt.NDArray
        activations: SerialSparse

    """
    graph: SerialSparse
    jumps: npt.NDArray
    activations: SerialSparse
